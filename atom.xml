<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈峰涛</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-16T07:31:51.850Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>陈峰涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/10/17/AngularJS%20%E7%94%A8%20Interceptors%20%E6%9D%A5%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%20HTTP%20%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
    <id>http://yoursite.com/2018/10/17/AngularJS 用 Interceptors 来统一处理 HTTP 请求和响应/</id>
    <published>2018-10-17T08:53:38.208Z</published>
    <updated>2018-10-16T07:31:51.850Z</updated>
    
    <content type="html"><![CDATA[<p>主要功能</p><p>Interceptors 有两个处理时机，分别是：</p><p>其它程序代码执行 HTTP 请求之后，在实际从浏览器发出请求之前，即处理请求<br>得到请求的响应之后，在交给其它程序代码处理之前，即处理请求的响应<br>所以，不难理解它可以用于如下几个方面：</p><p>全局处理错误<br>统一进行身份验证一类的处理<br>对所有发出去的请求进行预处理<br>对所有收到的响应进行预处理<br>做一些增强用户体验的操作，例如显示一个进度条<br>基本使用</p><p>先来看看最基本的使用：</p><p>var app = angular.module(‘app’, []);</p><p>// 定义一个 Service ，稍等将会把它作为 Interceptors 的处理函数<br>app.factory(‘HttpInterceptor’, [‘$q’, HttpInterceptor]);</p><p>function HttpInterceptor($q) {<br>  return {<br>    request: function(config){<br>      return config;<br>    },<br>    requestError: function(err){<br>      return $q.reject(err);<br>    },<br>    response: function(res){<br>      return res;<br>    },<br>    responseError: function(err){<br>      if(-1 === err.status) {<br>        // 远程服务器无响应<br>      } else if(500 === err.status) {<br>        // 处理各类自定义错误<br>      } else if(501 === err.status) {<br>        // …<br>      }<br>      return $q.reject(err);<br>    }<br>  };<br>}</p><p>// 添加对应的 Interceptors<br>app.config([‘$httpProvider’, function($httpProvider){<br>  $httpProvider.interceptors.push(HttpInterceptor);<br>}]);<br>进一步了解</p><p>实际的 Interceptor 处理函数中， return 了一个包含四个成员的对象，这四个成员都 不是必须 的，可以按实际情况指定一二，分别如下：</p><p>request ：接收一个参数，它是 $http 中的标准 config 对象，同时也需要返回一个标准 config ，此时可以添加各类身份验证信息，同时也可在此启动进度条<br>requestError ：当有多个 Interceptor 的时候， requestError 会在前一个 Interceptor 抛出错误或者执行 $q.reject() 时执行，接收的参数就对应的错误<br>response ：接受一个请求对象参数，可以不处理就直接返回，此时也可以将进度条显示为成功完成，当然，如果后端 API 返回自定义错误时，HTTP 的状态码仍然是 200 得话，便在这里处理自定义错误，也可以对返回数据做一些处理，注意要将进度条置为完成<br>responseError ：这个是重头戏，即可以处理标准的 Http 错误，如服务器没有响应时，或者 PHP 之类的 CGI 经常出现的 502 一类，还可以处理 HTTP 状态码不是 200 的各类自定义错误<br>上面四个中，前两个是请求的前置处理，后两个是针对请求的响应的处理。</p><h2 id="Error-injector-cdep-angular-循环依赖解决方案"><a href="#Error-injector-cdep-angular-循环依赖解决方案" class="headerlink" title="Error: [$injector:cdep] angular 循环依赖解决方案"></a>Error: [$injector:cdep] angular 循环依赖解决方案</h2><pre><code>app.factory(&apos;httpInterceptor&apos;, [&apos;$q&apos;, &apos;$injector&apos;, &apos;$state&apos;, ($q, $injector，$state) =&gt; {let httpInterceptor = {    // 响应    response: (response) =&gt; {        // 判断权限        if (response &amp;&amp; response.data &amp;&amp; response.data._NO_PERMISSION_) {            $state.go(&apos;app.no_permission&apos;, {                message: response.data._ERROR_MESSAGE_ || &apos;没有访问权限&apos;            });        }        return response;    }}]);</code></pre><p>直接注入$state会导致循环注入错误</p><pre><code>Error: [$injector:cdep] http://errors.angularjs.org/1.3.10/$injector/cdep?p0=$http &lt;- $templateFactory &lt;- $view &lt;- $state &lt;- httpInterceptor &lt;- $http &lt;- $translateStaticFilesLoader</code></pre><p>解决：在response方法中，手动注入$state</p><pre><code>app.factory(&apos;httpInterceptor&apos;, [&apos;$q&apos;, &apos;$injector&apos;, ($q, $injector) =&gt; {    let httpInterceptor = {        // 响应        response: (response) =&gt; {            let $state = $injector.get(&apos;$state&apos;); // 手动注入            // 判断权限            if (response &amp;&amp; response.data &amp;&amp; response.data._NO_PERMISSION_) {                $state.go(&apos;app.no_permission&apos;, {                    message: response.data._ERROR_MESSAGE_ || &apos;没有访问权限&apos;                });            }            return response;        }}]);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要功能&lt;/p&gt;
&lt;p&gt;Interceptors 有两个处理时机，分别是：&lt;/p&gt;
&lt;p&gt;其它程序代码执行 HTTP 请求之后，在实际从浏览器发出请求之前，即处理请求&lt;br&gt;得到请求的响应之后，在交给其它程序代码处理之前，即处理请求的响应&lt;br&gt;所以，不难理解它可以用于如下
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/12/26/nodejs%E4%B9%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2017/12/26/nodejs之文件路径/</id>
    <published>2017-12-26T09:10:48.792Z</published>
    <updated>2017-12-19T16:10:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nodejs中的几种文件路径比较"><a href="#nodejs中的几种文件路径比较" class="headerlink" title="nodejs中的几种文件路径比较"></a>nodejs中的几种文件路径比较</h2><p>在调试一个node代码的时候，总是出问题，最后找到原因是由于路径的问题，node中的路径有全局变量<code>__dirname</code>、全局变量<code>__filename</code>、<code>./</code>、<code>../</code>以及<code>process.cwd()</code><br>首先看个例子：</p><p>   在桌面的nodedemo文件夹新建了simple.js文件，对以上几种路径进行输出<br><img src="nodepath.png" alt=""></p><p>1、__dirname: 表示当前模块所在的文件夹的绝对路径。</p><p>2、__filename: 表示当前模块的绝对路径</p><p>3、process.cwd()表示的是node进程当前工作的绝对路径</p><p>4、./在打印的时候要借助path.resolve()进行转换，与process.cwd()效果相同</p><p>5、../表示当前工作目录的上级目录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nodejs中的几种文件路径比较&quot;&gt;&lt;a href=&quot;#nodejs中的几种文件路径比较&quot; class=&quot;headerlink&quot; title=&quot;nodejs中的几种文件路径比较&quot;&gt;&lt;/a&gt;nodejs中的几种文件路径比较&lt;/h2&gt;&lt;p&gt;在调试一个node代码的时候
      
    
    </summary>
    
    
  </entry>
  
</feed>
